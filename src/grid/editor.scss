/**
 * #.# Editor Styles
 *
 * CSS for just Backend enqueued after style.scss
 * which makes it higher in priority.
 */

html {
	box-sizing: border-box;
	-ms-overflow-style: scrollbar;
}

*,
*::before,
*::after {
	box-sizing: inherit;
}

#editor .wp-block {
	max-width: unset;
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		$min: $min + 280px;
		@media (min-width: $min) {
			#editor {
				@content;

				@if $name == sm or $name == md {
					.editor-styles-wrapper[style*="width: 780px;"] {
						@content;
					}
				}
			}
		}
	} @else {
		#editor {
			@content;

			.editor-styles-wrapper[style*="width: 360px;"],
			.editor-styles-wrapper[style*="width: 780px;"] {
				@content;
			}
		}
	}
}

@import "../../node_modules/bootstrap/scss/grid";
@import "../../node_modules/bootstrap/scss/utilities/flex";

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		.justify-content#{$infix}-evenly {
			justify-content: space-evenly !important;
		}
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
	@include media-breakpoint-up($breakpoint) {
		.hide#{$infix},
		.hide#{$infix}-up {
			display: none !important;
		}
	}
	@include media-breakpoint-down($breakpoint) {
		.hide#{$infix}-down {
			display: none !important;
		}
	}
	@include media-breakpoint-only($breakpoint) {
		.hide#{$infix}-only {
			display: none !important;
		}
	}
}

.block-editor-block-list__block[data-title] {
	&[data-type="gutestrap/container"] {
		&.has-child-selected,
		&.is-selected,
		&.is-hovered,
		&:hover {
			outline: $admin-color-fallback auto;
			outline: $admin-color auto;
		}
	}
}

.gutestrap-block {
	&-container,
	&-col {
		&.block-editor-block-list__block {
			margin-top: unset;
			margin-bottom: unset;
		}

		.block-editor-block-list__layout & {
			margin-left: unset;
			margin-right: unset;
		}
	}
}

#editor .w-100 {
	width: 100% !important;
}

.gutestrap-block-col + .block-list-appender {
	// margin-top: 0;

	&::before {
		content: "Â·";
		font-size: 0.625rem !important;
		display: block;
		opacity: 0;
		visibility: hidden;
		pointer-events: none;
	}
}

.gutestrap-block {
	&.-is-disabled {
		opacity: 0.5;
		filter: grayscale(0.25);
		// border: thin dashed gray;
	}
	&-row-break {
		@include make-col-ready;
	}
}

.wp-block-gutestrap {
	&-col {
		& > div > div > * {
			&:first-child {
				margin-top: 0;
			}
			&:nth-last-child(2) {
				margin-bottom: 0;
			}
		}
	}

	&-row-break {
		font-size: 1.5rem;
		color: grey;
		display: flex;
		align-items: center;

		&::before,
		&::after {
			content: "";
			display: block;
			border: 0;
			border-top: 1px solid #ddd;
			border-bottom: 1px solid #fafafa;
			flex: 1 1 0;
		}

		svg {
			margin: 0 0.25em;
			display: block;
		}
	}
}
