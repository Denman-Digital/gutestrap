/**
 * #.# Styles
 *
 * CSS for Frontend.
 */

@use "common" as *;

// @import "../node_modules/bootstrap/scss/bootstrap-grid.scss";
$include-column-box-sizing: true !default;

@import "../node_modules/bootstrap/scss/functions";
@import "../node_modules/bootstrap/scss/variables";

@import "../node_modules/bootstrap/scss/mixins/lists";
@import "../node_modules/bootstrap/scss/mixins/breakpoints";
@import "../node_modules/bootstrap/scss/mixins/container";
@import "../node_modules/bootstrap/scss/mixins/grid";
@import "../node_modules/bootstrap/scss/mixins/utilities";

@import "../node_modules/bootstrap/scss/vendor/rfs";

@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";

@import "../node_modules/bootstrap/scss/utilities";
// Only use the utilities we need
// stylelint-disable-next-line scss/dollar-variable-default
$utilities: map-get-multiple(
	$utilities,
	(
		// "display",
		// "order",
		"flex",
		"flex-direction",
		"flex-grow",
		"flex-shrink",
		"flex-wrap",
		"justify-content",
		"align-items",
		"align-content",
		"align-self",
		// "margin",
		// "margin-x",
		// "margin-y",
		// "margin-top",
		// "margin-end",
		// "margin-bottom",
		// "margin-start",
		// "negative-margin",
		// "negative-margin-x",
		// "negative-margin-y",
		// "negative-margin-top",
		// "negative-margin-end",
		// "negative-margin-bottom",
		// "negative-margin-start",
		// "padding",
		// "padding-x",
		// "padding-y",
		// "padding-top",
		// "padding-end",
		// "padding-bottom",
		// "padding-start",
	)
);

$utilities: map-merge(
	(
		"order": (
			responsive: true,
			property: order,
			values: (
				first: -1,
				0: 0,
				1: 1,
				2: 2,
				3: 3,
				4: 4,
				5: 5,
				6: 6,
				7: 7,
				8: 8,
				9: 9,
				10: 10,
				11: 11,
				12: 12,
				last: 99,
			),
		),
	),
	$utilities
);

@import "../node_modules/bootstrap/scss/utilities/api";

// Add a negative margin to default .row, then the vertical padding to all immediate children columns (to prevent runaway style inheritance).
.row.no-gutters {
	margin-left: 0;
	margin-right: 0;

	> .col,
	> [class*="col-"] {
		padding-left: 0;
		padding-right: 0;
	}
}

.row.vertical-gutters {
	margin-top: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * -0.5);
	margin-bottom: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * -0.5);

	> .col,
	> [class*="col-"] {
		padding-top: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * 0.5);
		padding-bottom: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * 0.5);
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		.justify-content#{$infix}-evenly {
			justify-content: space-evenly !important;
		}
		.w#{$infix}-100 {
			width: 100% !important;
		}
		[class*="justify-content#{$infix}-"]:not(.justify-content#{$infix}-stretch) {
			> .col__content {
				flex-basis: unset;
			}
		}
		.justify-content#{$infix}-stretch {
			> .col__content {
				flex-basis: 100%;
				max-width: 100%;
			}
		}
	}
}

.wp-block-gutestrap {
	&-col {
		display: flex;

		> .col__inner,
		.col__inner {
			width: 100%;
			display: flex;

			> .col__content {
				max-width: 100%;
			}
		}
	}
}

// @each $breakpoint in map-keys($grid-breakpoints) {
// 	$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
// 	@include media-breakpoint-up($breakpoint) {
// 		.hide#{$infix},
// 		.hide#{$infix}-up {
// 			display: none !important;
// 		}
// 	}
// 	@include media-breakpoint-down($breakpoint) {
// 		.hide#{$infix}-down {
// 			display: none !important;
// 		}
// 	}
// 	@include media-breakpoint-only($breakpoint) {
// 		.hide#{$infix}-only {
// 			display: none !important;
// 		}
// 	}
// }
