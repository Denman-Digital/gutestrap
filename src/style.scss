/**
 * #.# Styles
 *
 * CSS for Frontend.
 */

@use "sass:map";
@use "sass:list";
@use "sass:math";
@use "common" as *;

@import "../node_modules/bootstrap/scss/mixins/breakpoints";
@import "../node_modules/bootstrap/scss/mixins/grid-framework";
@import "../node_modules/bootstrap/scss/mixins/grid";

@mixin make-container($gutter: $grid-gutter-width) {
	width: 100%;
	margin-right: auto;
	margin-left: auto;
	padding-right: 0.5 * $gutter;
	padding-left: 0.5 * $gutter;
}

@mixin make-row($gutter: $grid-gutter-width) {
	display: flex;
	flex-wrap: wrap;
	margin-right: -0.5 * $gutter;
	margin-left: -0.5 * $gutter;
}

@mixin make-col($size, $columns: $grid-columns) {
	flex: 0 0 math.percentage(math.div($size, $columns));
	// Add a `max-width` to ensure content within each column does not blow out
	// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
	// do not appear to require this.
	max-width: math.percentage(math.div($size, $columns));
}

@mixin make-col-offset($size, $columns: $grid-columns) {
	$num: math.div($size, $columns);
	margin-left: if($num == 0, 0, math.percentage($num));
}

@import "../node_modules/bootstrap/scss/grid";

.row {
	&.no-gutters {
		margin-left: 0;
		margin-right: 0;

		> .col,
		> [class*="col-"] {
			padding-left: 0;
			padding-right: 0;
		}
	}
	// Add a negative margin to default .row, then the vertical padding to all immediate children columns (to prevent runaway style inheritance).
	&.vertical-gutters {
		margin-top: -0.5 * $grid-gutter-width;
		margin-bottom: -0.5 * $grid-gutter-width;

		> .col,
		> [class*="col-"] {
			padding-top: 0.5 * $grid-gutter-width;
			padding-bottom: 0.5 * $grid-gutter-width;
		}
	}
}

@import "../node_modules/bootstrap/scss/utilities/flex";

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		.justify-content#{$infix}-evenly {
			justify-content: space-evenly !important;
		}
		.w#{$infix}-100 {
			width: 100% !important;
		}
		[class*="justify-content#{$infix}-"]:not(.justify-content#{$infix}-stretch) {
			> .col__content {
				flex-basis: unset;
			}
		}
		.justify-content#{$infix}-stretch {
			> .col__content {
				flex-basis: 100%;
				max-width: 100%;
			}
		}
	}
}

.wp-block-gutestrap {
	&-col {
		display: flex;

		> .col__inner,
		.col__inner {
			width: 100%;
			display: flex;

			> .col__content {
				max-width: 100%;
			}
		}
	}
}

$container-classes: (".container-fluid");
@each $breakpoint in map.keys($grid-breakpoints) {
	$container-classes: list.append($container-classes, ".container#{breakpoint-infix($breakpoint)}", $separator: comma);
}

#{$container-classes} {
	&.contain-inset-vert {
		padding-top: 0.5 * $grid-gutter-width;
		padding-bottom: 0.5 * $grid-gutter-width;
	}

	&.contain-inset-wide {
		padding-left: $grid-gutter-width;
		padding-right: $grid-gutter-width;

		&.contain-inset-vert {
			padding-top: $grid-gutter-width;
			padding-bottom: $grid-gutter-width;
		}
	}

	.uncontain-nested[class*="container"] {
		padding: 0 !important;
	}
}

@each $containment in (none, strict, content, layout, paint, style, size, inline-size) {
	.contain-#{$containment} {
		contain: $containment !important;
	}
}
