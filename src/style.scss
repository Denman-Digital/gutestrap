/**
 * #.# Styles
 *
 * CSS for Frontend.
 */

@use "sass:list";
@use "sass:map";
@use "common" as *;

// @import "../node_modules/bootstrap/scss/bootstrap-grid.scss";
$include-column-box-sizing: true !default;

@import "../node_modules/bootstrap/scss/functions";
@import "../node_modules/bootstrap/scss/variables";

@import "../node_modules/bootstrap/scss/mixins/lists";
@import "../node_modules/bootstrap/scss/mixins/breakpoints";

@import "../node_modules/bootstrap/scss/mixins/grid";

@mixin make-row($gutter: $grid-gutter-width) {
	display: flex;
	flex-wrap: wrap;
	margin-right: calc(var(--gs-gutter) / -2);
	margin-left: calc(var(--gs-gutter) / -2);
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
	// Add box sizing if only the grid is loaded
	box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we set the width
	// later on to override this initial width.
	flex-shrink: 0;
	width: 100%;
	max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
	padding-left: calc(var(--gs-gutter) / 2) !important;
	padding-right: calc(var(--gs-gutter) / 2) !important;
}

@import "../node_modules/bootstrap/scss/mixins/utilities";

@import "../node_modules/bootstrap/scss/vendor/rfs";

// @import "../node_modules/bootstrap/scss/containers";

:root {
	--gs-gutter: #{$grid-gutter-width};
	@each $breakpoint in map.keys($grid-breakpoints) {
		@if $breakpoint == xs {
			--gs-container-w-#{$breakpoint}: initial;
		} @else {
			--gs-container-w-#{$breakpoint}: #{map.get($container-max-widths, $breakpoint)};
		}
	}
	@each $breakpoint in map.keys($grid-breakpoints) {
		@include media-breakpoint-up($breakpoint) {
			--gs-container-w: var(--gs-container-w-#{$breakpoint});
		}
	}
}

.gutter-reset {
	--gs-gutter: #{$grid-gutter-width};
}

// Single container class with breakpoint max-widths
.container,
// 100% wide container at all breakpoints
.container-fluid {
	width: 100%;
	margin-right: auto;
	margin-left: auto;
	padding-right: calc(var(--gs-gutter) / 2);
	padding-left: calc(var(--gs-gutter) / 2);
}

.container {
	max-width: var(--gs-container-w);
}

// Responsive containers that are 100% wide until a breakpoint
@each $breakpoint, $container-max-width in $container-max-widths {
	.container-#{$breakpoint} {
		@extend .container-fluid;
		@include media-breakpoint-up($breakpoint) {
			max-width: var(--gs-container-w);
		}
	}
}

@import "../node_modules/bootstrap/scss/grid";

@import "../node_modules/bootstrap/scss/utilities";
// Only use the utilities we need
// stylelint-disable-next-line scss/dollar-variable-default
$utilities: map-get-multiple(
	$utilities,
	(
		"flex",
		"flex-direction",
		"flex-grow",
		"flex-shrink",
		"flex-wrap",
		"justify-content",
		"align-items",
		"align-content",
		"align-self"
	)
);

$utilities: map-merge(
	(
		"order": (
			responsive: true,
			property: order,
			values: (
				first: -1,
				0: 0,
				1: 1,
				2: 2,
				3: 3,
				4: 4,
				5: 5,
				6: 6,
				7: 7,
				8: 8,
				9: 9,
				10: 10,
				11: 11,
				12: 12,
				last: 99,
			),
		),
	),
	$utilities
);

@import "../node_modules/bootstrap/scss/utilities/api";

.row.no-gutters {
	margin-left: 0;
	margin-right: 0;

	> .col,
	> [class*="col-"] {
		padding-left: 0 !important;
		padding-right: 0 !important;
	}
}

// Add a negative margin to default .row, then the vertical padding to all immediate children columns (to prevent runaway style inheritance).
.row.vertical-gutters {
	margin-top: calc(var(--gs-gutter) / -2);
	margin-bottom: calc(var(--gs-gutter) / -2);

	> .col,
	> [class*="col-"] {
		padding-top: calc(var(--gs-gutter) / 2) !important;
		padding-bottom: calc(var(--gs-gutter) / 2) !important;
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		.justify-content#{$infix}-evenly {
			justify-content: space-evenly !important;
		}
		.w#{$infix}-100 {
			width: 100% !important;
		}
		[class*="justify-content#{$infix}-"]:not(.justify-content#{$infix}-stretch) {
			> .col__content {
				flex-basis: unset;
			}
		}
		.justify-content#{$infix}-stretch {
			> .col__content {
				flex-basis: 100%;
				max-width: 100%;
			}
		}
	}
}

$container-classes: (".container-fluid");
@each $breakpoint in map.keys($grid-breakpoints) {
	$container-classes: list.append($container-classes, ".container#{breakpoint-infix($breakpoint)}", $separator: comma);
}

.contain-inset-vert:is(#{$container-classes}) {
	padding-top: calc(var(--gs-gutter) / 2);
	padding-bottom: calc(var(--gs-gutter) / 2);
}

.contain-inset-wide:is(#{$container-classes}) {
	--gs-gutter: calc(#{$grid-gutter-width} * 2);
	> * {
		--gs-gutter: #{$grid-gutter-width};
	}
}

[class*="container"]:is(#{$container-classes}) .uncontain-nested:is(#{$container-classes}) {
	padding: 0 !important;
}

.wp-block-gutestrap {
	&-container {
		&.has-min-height {
			display: flex;
			flex-flow: column;
			justify-content: center;
		}
	}

	&-row {
		overflow: hidden;
	}
	&-row > &-col {
		background-image: none !important;
		background-color: transparent !important;
		color: inherit !important;
	}

	&-col {
		display: flex;

		> .col__inner,
		.col__inner {
			width: 100%;
			display: flex;

			> .col__content {
				max-width: 100%;
			}
		}
	}
}
