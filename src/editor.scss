/**
 * #.# Editor Styles
 *
 * CSS for just Backend enqueued after style.scss
 * which makes it higher in priority.
 */

@use "common" as *;

html {
	box-sizing: border-box;
	-ms-overflow-style: scrollbar;
}

*,
*::before,
*::after {
	box-sizing: inherit;
}

.gutestrap-enabled #editor .wp-block {
	max-width: unset;
}

$include-column-box-sizing: true !default;

@import "../node_modules/bootstrap/scss/functions";
@import "../node_modules/bootstrap/scss/variables";

@import "../node_modules/bootstrap/scss/mixins/lists";
@import "../node_modules/bootstrap/scss/mixins/breakpoints";
@import "../node_modules/bootstrap/scss/mixins/container";
@import "../node_modules/bootstrap/scss/mixins/grid";
@import "../node_modules/bootstrap/scss/mixins/utilities";

@import "../node_modules/bootstrap/scss/vendor/rfs";

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		$min: $min + 280px;
		@media (min-width: $min) {
			.gutestrap-enabled #editor {
				@if $name == sm or $name == md {
					&,
					& .editor-styles-wrapper[style*="width: 780px"] {
						@content;
					}
				} @else {
					.editor-styles-wrapper:not([style*="width"]) {
						@content;
					}
				}
			}
		}
	} @else {
		.gutestrap-enabled #editor {
			&,
			& .editor-styles-wrapper[style*="width: 360px"],
			& .editor-styles-wrapper[style*="width: 780px"] {
				@content;
			}
		}
	}
}

// @import "../node_modules/bootstrap/scss/root";

@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";

@import "../node_modules/bootstrap/scss/utilities";
// Only use the utilities we need
// stylelint-disable-next-line scss/dollar-variable-default
$utilities: map-get-multiple(
	$utilities,
	(
		// "display",
		"order",
		"flex",
		"flex-direction",
		"flex-grow",
		"flex-shrink",
		"flex-wrap",
		"justify-content",
		"align-items",
		"align-content",
		"align-self",
		// "margin",
		// "margin-x",
		// "margin-y",
		// "margin-top",
		// "margin-end",
		// "margin-bottom",
		// "margin-start",
		// "negative-margin",
		// "negative-margin-x",
		// "negative-margin-y",
		// "negative-margin-top",
		// "negative-margin-end",
		// "negative-margin-bottom",
		// "negative-margin-start",
		// "padding",
		// "padding-x",
		// "padding-y",
		// "padding-top",
		// "padding-end",
		// "padding-bottom",
		// "padding-start",
	)
);

@import "../node_modules/bootstrap/scss/utilities/api";

// Add a negative margin to default .row, then the vertical padding to all immediate children columns (to prevent runaway style inheritance).
.row.no-gutters {
	margin-left: 0;
	margin-right: 0;

	> .col,
	> [class*="col-"] {
		padding-left: 0;
		padding-right: 0;
	}
}

.vertical-gutters {
	margin-top: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * -0.5);
	margin-bottom: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * -0.5);

	> .col,
	> [class*="col-"] {
		padding-top: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * 0.5);
		padding-bottom: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * 0.5);
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		.justify-content#{$infix}-evenly {
			justify-content: space-evenly !important;
		}
		#editor .w#{$infix}-100 {
			width: 100% !important;
			max-width: 100% !important;
			flex-basis: 100% !important;
		}
	}
}

.gutestrap-block {
	&-container,
	&-col {
		.block-editor-block-list__layout & {
			margin-left: unset;
			margin-right: unset;
		}
	}

	&-container {
		outline: 1px dashed gray;
		outline-offset: -1px;
		min-height: 1.25rem;

		&.has-child-selected,
		&.is-selected,
		&.is-hovered {
			outline: 1px dashed tomato;
		}

		&::before {
			content: attr(data-title);
			display: block;
			font-size: 0.75rem;
			font-family: sans-serif;
			color: gray;
			padding-left: 0.25rem;
		}
		&.is-selected,
		&.has-child-selected,
		&.has-inner-blocks {
			&::before {
				margin-bottom: -28px;
			}
		}
	}

	&-row {
		outline: 1px dashed gray;
		outline-offset: -1px;

		&.has-child-selected,
		&.is-selected,
		&.is-hovered {
			outline: 1px dashed limegreen;
		}

		&::before {
			content: attr(data-title);
			display: block;
			font-size: 0.75rem;
			font-family: sans-serif;
			color: gray;
			padding-left: 0.25rem;
		}

		.-is-example &,
		&.-is-example {
			outline: none !important;

			&::before {
				content: none !important;
			}
		}
	}

	&-col {
		#editor & {
			background: none !important;
		}

		&,
		& > *:not(.wp-block-gutestrap-col) {
			display: flex;
		}

		> *,
		> * > .wp-block-gutestrap-col {
			width: 100%;
			align-self: stretch;
		}

		&.has-child-selected,
		&.is-selected,
		&.is-hovered {
			outline: 1px dashed dodgerblue;
		}
		outline-offset: -1px;

		&.block-editor-block-list__block {
			margin-top: unset;
			margin-bottom: unset;
		}

		& > &-visualizer > .col__inner > .block-editor-inner-blocks {
			min-width: 1em;
		}
		&
			> &-visualizer
			> .col__inner
			> .block-editor-inner-blocks
			> .block-editor-block-list__layout
			> p[aria-label^="Empty block"] {
			min-width: 5em;
		}
		&:not(.has-inner-blocks) > &-visualizer > .col__inner > .block-editor-inner-blocks {
			width: 100%;
		}

		> * > .block-editor-block-list__layout {
			> .block-list-appender:not(:first-child) {
				margin: 0;
			}
		}
	}

	&-row.is-selected &-col {
		outline: 1px dashed gray;
	}

	&-row-break {
		@include make-col-ready;
	}

	&.-is-disabled {
		opacity: 0.5;
		filter: grayscale(0.25);
		// border: 1px dashed gray;
	}
}

.wp-block-gutestrap {
	&-col {
		& > div > div > * {
			&:first-child:not(:last-child) {
				margin-top: 0;
			}
			&:nth-last-child(2) {
				margin-bottom: 0;
			}
		}
		@each $breakpoint in map-keys($grid-breakpoints) {
			@include media-breakpoint-up($breakpoint) {
				$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
				// &.justify-content#{$infix}-stretch >  {
				// 	flex-basis: 100%;
				// }
				&[class*="justify-content#{$infix}-"]:not(.justify-content#{$infix}-stretch) {
					> .block-editor-inner-blocks {
						flex-basis: unset;
					}
				}
				&.justify-content#{$infix}-stretch[class] {
					> .block-editor-inner-blocks {
						flex-basis: 100%;
					}
				}
			}
		}
	}

	&-row-break {
		font-size: 1.5rem;
		color: grey;
		display: flex;
		align-items: center;

		&::before,
		&::after {
			content: "";
			display: block;
			border: 0;
			border-top: 1px solid #ddd;
			border-bottom: 1px solid #fafafa;
			flex: 1 1 0;
		}

		svg {
			margin: 0 0.25em;
			display: block;
		}
	}
}

#editor {
	.spacing-not-linked .spacing-unit-control {
		.components-input-control__input {
			width: 6.625em;
		}
	}
	.spacing-linked-button {
		svg {
			width: 1.5em;
			height: auto;
		}
	}
	.spacing-unit-control {
		label {
			font-size: smaller;
		}
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
	@include media-breakpoint-up($breakpoint) {
		.hide#{$infix},
		.hide#{$infix}-up {
			display: none !important;
		}
	}
	@include media-breakpoint-down($breakpoint) {
		.hide#{$infix}-down {
			display: none !important;
		}
	}
	@include media-breakpoint-only($breakpoint) {
		.hide#{$infix}-only {
			display: none !important;
		}
	}
}

.block-editor-block-list__block[data-title] {
	&[data-type="core/group"] {
		&:not(.has-background) {
			border: 1px dashed gray;
		}
	}
}

#editor {
	.row.wp-block-gutestrap-row {
		margin-right: 0;
		margin-left: 0;
		display: block;

		> .block-editor-inner-blocks {
			max-width: 100%;
		}

		> * > .block-editor-block-list__layout {
			@include make-row();

			> .block-list-appender {
				padding-left: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * 0.5);
				width: 100%;
				max-width: 100%;
				flex-basis: 100%;
				pointer-events: none;
				> * {
					width: fit-content;
					pointer-events: auto;
				}
			}
		}

		&.no-gutters > * > .block-editor-block-list__layout {
			margin-right: 0;
			margin-left: 0;

			> .col,
			> [class*="col-"] {
				padding-right: 0;
				padding-left: 0;
			}
		}
		// Add a negative margin to default .row, then the vertical padding to all immediate children columns (to prevent runaway style inheritance).
		&.vertical-gutters > * > .block-editor-block-list__layout {
			margin-top: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * -0.5);
			margin-bottom: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * -0.5);

			> .col,
			> [class*="col-"] {
				padding-top: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * 0.5);
				padding-bottom: calc(var(--#{$variable-prefix}gutter-x, #{$grid-gutter-width}) * 0.5);
			}
		}
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

	@include media-breakpoint-up($breakpoint, $grid-breakpoints) {
		@if $grid-row-columns > 0 {
			@for $count from 1 through $grid-row-columns {
				.row-cols#{$infix}-#{$count} > * > .block-editor-block-list__layout {
					> * {
						flex: 0 0 calc(100% / #{$count});
						max-width: calc(100% / #{$count});
					}
				}
			}
		}

		.wp-block-gutestrap-row {
			&.justify-content#{$infix}-start > * > .block-editor-block-list__layout {
				justify-content: flex-start !important;
			}
			&.justify-content#{$infix}-end > * > .block-editor-block-list__layout {
				justify-content: flex-end !important;
			}
			&.justify-content#{$infix}-center > * > .block-editor-block-list__layout {
				justify-content: center !important;
			}
			&.justify-content#{$infix}-between > * > .block-editor-block-list__layout {
				justify-content: space-between !important;
			}
			&.justify-content#{$infix}-around > * > .block-editor-block-list__layout {
				justify-content: space-around !important;
			}
			&.justify-content#{$infix}-evenly > * > .block-editor-block-list__layout {
				justify-content: space-evenly !important;
			}

			&.align-items#{$infix}-start > * > .block-editor-block-list__layout {
				align-items: flex-start !important;
			}
			&.align-items#{$infix}-end > * > .block-editor-block-list__layout {
				align-items: flex-end !important;
			}
			&.align-items#{$infix}-center > * > .block-editor-block-list__layout {
				align-items: center !important;
			}
			&.align-items#{$infix}-baseline > * > .block-editor-block-list__layout {
				align-items: baseline !important;
			}
			&.align-items#{$infix}-stretch > * > .block-editor-block-list__layout {
				align-items: stretch !important;
			}
			&.flex#{$infix}-row > * > .block-editor-block-list__layout {
				flex-direction: row !important;
			}
			&.flex#{$infix}-row-reverse > * > .block-editor-block-list__layout {
				flex-direction: row-reverse !important;
			}
		}
	}
}

//==============================================================================
// Components
//==============================================================================
.bi {
	&-block-control-icon {
		font-size: 1.25rem;
		flex: 0 0 auto;
	}
}

.components-dropdown-menu__popover.popover-align-text-start {
	.components-dropdown-menu__menu > button {
		text-align: left;
		text-align: start;
	}
}

//==============================================================================
// Block Clear
//==============================================================================
hr.gutestrap-block-clear-placeholder {
	color: grey;

	&::after {
		content: "\f314";
		font-family: dashicons;
		display: block;
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		padding: 0 0.5em;
		background-color: white;
	}
}

.wp-block[data-type="gutestrap/clear"] {
	clear: both !important;
}

//==============================================================================
// Custom SCSS
//==============================================================================
.block-editor-block-list__block[data-title] {
	&[data-type="gutestrap/custom-scss"] {
		font-size: initial;
		margin: auto;
		border: thin dashed lightgrey;
		padding: 0.5em;
		padding-left: 0;
		border-radius: 0.5em;
		background: whitesmoke;
		max-width: 120ch !important;

		&::before {
			padding: 0 0 0.75em 1em;
		}
	}
}

.gutestrap-custom-scss-editor {
	font-size: initial;

	.components-modal__frame & {
		textarea,
		.CodeMirror {
			width: 80vw;
			height: 50vh;
			min-height: 10em;
			max-width: 120ch;
		}
	}
}
