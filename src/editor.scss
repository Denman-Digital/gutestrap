/**
 * #.# Editor Styles
 *
 * CSS for just Backend enqueued after style.scss
 * which makes it higher in priority.
 */

html {
	box-sizing: border-box;
	-ms-overflow-style: scrollbar;
}

*,
*::before,
*::after {
	box-sizing: inherit;
}

#editor .wp-block {
	max-width: unset;
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		$min: $min + 280px;
		@media (min-width: $min) {
			#editor {
				@content;

				@if $name == sm or $name == md {
					.editor-styles-wrapper[style*="width: 780px;"] {
						@content;
					}
				}
			}
		}
	} @else {
		#editor {
			@content;

			.editor-styles-wrapper[style*="width: 360px;"],
			.editor-styles-wrapper[style*="width: 780px;"] {
				@content;
			}
		}
	}
}

@import "../node_modules/bootstrap/scss/grid";

// Add a negative margin to default .row, then the vertical padding to all immediate children columns (to prevent runaway style inheritance).
.vertical-gutters {
	margin-top: -($grid-gutter-width / 2);
	margin-bottom: -($grid-gutter-width / 2);

	> .col,
	> [class*="col-"] {
		padding-top: ($grid-gutter-width / 2);
		padding-bottom: ($grid-gutter-width / 2);
	}
}

@import "../node_modules/bootstrap/scss/utilities/flex";

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		.justify-content#{$infix}-evenly {
			justify-content: space-evenly !important;
		}
		#editor .w#{$infix}-100 {
			width: 100% !important;
		}
	}
}

.gutestrap-block {
	&-container,
	&-col {
		.block-editor-block-list__layout & {
			margin-left: unset;
			margin-right: unset;
		}
	}

	&-container {
		outline: 1px dashed gray;
		outline-offset: -1px;
		min-height: 1.25rem;

		&.has-child-selected,
		&.is-selected,
		&.is-hovered {
			outline: 1px dashed tomato;
		}

		&::before {
			content: attr(data-title);
			display: block;
			font-size: 0.75rem;
			font-family: sans-serif;
			color: gray;
			padding-left: 0.25rem;
		}
		&.is-selected,
		&.has-child-selected,
		&.has-inner-blocks {
			&::before {
				margin-bottom: -28px;
			}
		}
	}

	&-row {
		&.has-child-selected,
		&.is-selected,
		&.is-hovered {
			outline: 1px dashed limegreen;
		}
		outline-offset: -1px;

		&::before {
			content: attr(data-title);
			display: block;
			font-size: 0.75rem;
			font-family: sans-serif;
			color: gray;
			padding-left: 0.25rem;
		}
	}

	&-col {
		&,
		& > *:not(.wp-block-gutestrap-col) {
			display: flex;
		}

		> *,
		> * > .wp-block-gutestrap-col {
			width: 100%;
			align-self: stretch;
		}

		&.has-child-selected,
		&.is-selected,
		&.is-hovered {
			outline: 1px dashed dodgerblue;
		}
		outline-offset: -1px;

		&.block-editor-block-list__block {
			margin-top: unset;
			margin-bottom: unset;
		}

		& > &-visualizer > .col__inner > .block-editor-inner-blocks {
			min-width: 1em;
		}
		& > &-visualizer > .col__inner > .block-editor-inner-blocks > &-inner-blocks > p[aria-label^="Empty block"] {
			min-width: 5em;
		}
		&:not(.has-inner-blocks) > &-visualizer > .col__inner > .block-editor-inner-blocks {
			width: 100%;
		}

		&-inner-blocks {
			> .block-list-appender:not(:first-child) {
				margin: 0;
			}
		}
	}

	&-row.is-selected &-col {
		outline: 1px dashed gray;
	}

	&-row-break {
		@include make-col-ready;
	}

	&.-is-disabled {
		opacity: 0.5;
		filter: grayscale(0.25);
		// border: 1px dashed gray;
	}
}

.wp-block-gutestrap {
	&-col {
		& > div > div > * {
			&:first-child:not(:last-child) {
				margin-top: 0;
			}
			&:nth-last-child(2) {
				margin-bottom: 0;
			}
		}
		@each $breakpoint in map-keys($grid-breakpoints) {
			@include media-breakpoint-up($breakpoint) {
				$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
				// &.justify-content#{$infix}-stretch >  {
				// 	flex-basis: 100%;
				// }
				&[class*="justify-content#{$infix}-"]:not(.justify-content#{$infix}-stretch) {
					> .block-editor-inner-blocks {
						flex-basis: unset;
					}
				}
				&.justify-content#{$infix}-stretch[class] {
					> .block-editor-inner-blocks {
						flex-basis: 100%;
					}
				}
			}
		}
	}

	&-row {
		> .block-list-appender {
			margin-left: $grid-gutter-width / 2;
			width: 100%;
			pointer-events: none;
			> * {
				width: fit-content;
				pointer-events: auto;
			}
		}
	}

	&-row-break {
		font-size: 1.5rem;
		color: grey;
		display: flex;
		align-items: center;

		&::before,
		&::after {
			content: "";
			display: block;
			border: 0;
			border-top: 1px solid #ddd;
			border-bottom: 1px solid #fafafa;
			flex: 1 1 0;
		}

		svg {
			margin: 0 0.25em;
			display: block;
		}
	}
}

#editor {
	.spacing-not-linked .spacing-unit-control {
		.components-input-control__input {
			width: 6.625em;
		}
	}
	.spacing-linked-button {
		svg {
			width: 1.5em;
			height: auto;
		}
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
	@include media-breakpoint-up($breakpoint) {
		.hide#{$infix},
		.hide#{$infix}-up {
			display: none !important;
		}
	}
	@include media-breakpoint-down($breakpoint) {
		.hide#{$infix}-down {
			display: none !important;
		}
	}
	@include media-breakpoint-only($breakpoint) {
		.hide#{$infix}-only {
			display: none !important;
		}
	}
}

.block-editor-block-list__block[data-title] {
	&[data-type="core/group"] {
		&:not(.has-background) {
			border: 1px dashed gray;
		}
	}
}
