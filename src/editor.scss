/**
 * #.# Editor Styles
 *
 * CSS for just Backend enqueued after style.scss
 * which makes it higher in priority.
 */
@use "sass:list";
@use "sass:math";
@use "sass:map";
@use "common" as *;

html {
	box-sizing: border-box;
	-ms-overflow-style: scrollbar;
}

*,
*::before,
*::after {
	box-sizing: inherit;
}

.gutestrap-enabled #editor .wp-block:not(.gutestrap-block-col) {
	max-width: unset;
}

$include-column-box-sizing: true !default;

@import "../node_modules/bootstrap/scss/functions";
@import "../node_modules/bootstrap/scss/variables";

@import "../node_modules/bootstrap/scss/mixins/lists";
@import "../node_modules/bootstrap/scss/mixins/breakpoints";

@import "../node_modules/bootstrap/scss/mixins/grid";

@mixin make-row($gutter: $grid-gutter-width) {
	display: flex;
	flex-wrap: wrap;
	margin-right: calc(var(--gs-gutter) / -2);
	margin-left: calc(var(--gs-gutter) / -2);
}

@mixin make-col-ready() {
	// Add box sizing if only the grid is loaded
	box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we set the width
	// later on to override this initial width.
	flex-shrink: 0;
	width: 100%;
	max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
	padding-right: calc(var(--gs-gutter) / 2);
	padding-left: calc(var(--gs-gutter) / 2);
}

@mixin make-col($size: false, $columns: $grid-columns) {
	@if $size {
		flex: 0 0 auto !important;
		width: math.percentage(math.div($size, $columns)) !important;
		max-width: math.percentage(math.div($size, $columns)) !important;
	} @else {
		flex: 1 1 0 !important;
		max-width: 100% !important;
	}
}

@import "../node_modules/bootstrap/scss/mixins/utilities";

@import "../node_modules/bootstrap/scss/vendor/rfs";

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		$min: $min + 17.5em;
		@media (min-width: $min) {
			.gutestrap-enabled #editor {
				@if $name == sm or $name == md {
					&,
					& .editor-styles-wrapper[style*="width: 780px"] {
						@content;
					}
				} @else {
					.editor-styles-wrapper:not([style*="width"]) {
						@content;
					}
				}
			}
		}
	} @else {
		.gutestrap-enabled #editor {
			&,
			& .editor-styles-wrapper[style*="width: 360px"],
			& .editor-styles-wrapper[style*="width: 780px"] {
				@content;
			}
		}
	}
}

:root {
	// --gs-gutter: #{$grid-gutter-width};
	// @each $breakpoint in map.keys($grid-breakpoints) {
	// 	@if $breakpoint == xs {
	// 		--gs-container-w-#{$breakpoint}: initial;
	// 	} @else {
	// 		--gs-container-w-#{$breakpoint}: #{map.get($container-max-widths, $breakpoint)};
	// 	}
	// }
	@each $breakpoint in map.keys($grid-breakpoints) {
		@include media-breakpoint-up($breakpoint) {
			--gs-container-w: var(--gs-container-w-#{$breakpoint}) !important;
		}
	}
}

// // Single container class with breakpoint max-widths
// .container,
// // 100% wide container at all breakpoints
// .container-fluid {
// 	width: 100%;
// 	margin-right: auto;
// 	margin-left: auto;
// 	padding-right: calc(var(--gs-gutter) / 2);
// 	padding-left: calc(var(--gs-gutter) / 2);
// }

// Responsive containers that are 100% wide until a breakpoint
@each $breakpoint, $container-max-width in $container-max-widths {
	.container-#{$breakpoint} {
		// @extend .container-fluid;
		@include media-breakpoint-up($breakpoint) {
			max-width: var(--gs-container-w) !important;
		}
	}
}

@import "../node_modules/bootstrap/scss/grid";

@import "../node_modules/bootstrap/scss/utilities";
// Only use the utilities we need
// stylelint-disable-next-line scss/dollar-variable-default
$utilities: map-get-multiple(
	$utilities,
	(
		"flex",
		"flex-direction",
		"flex-grow",
		"flex-shrink",
		"flex-wrap",
		"justify-content",
		"align-items",
		"align-content",
		"align-self"
	)
);

$utilities: map-merge(
	(
		"order": (
			responsive: true,
			property: order,
			values: (
				first: -1,
				0: 0,
				1: 1,
				2: 2,
				3: 3,
				4: 4,
				5: 5,
				6: 6,
				7: 7,
				8: 8,
				9: 9,
				10: 10,
				11: 11,
				12: 12,
				last: 99,
			),
		),
	),
	$utilities
);

@import "../node_modules/bootstrap/scss/utilities/api";

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		.justify-content#{$infix}-evenly {
			justify-content: space-evenly !important;
		}
		#editor .w#{$infix}-100 {
			width: 100% !important;
			max-width: 100% !important;
			flex-basis: 100% !important;
		}
	}
}

.gutestrap-block {
	&-container,
	&-col {
		.block-editor-block-list__layout & {
			margin-left: unset;
			margin-right: unset;
		}
	}

	&-container {
		outline: 1px dashed gray;
		outline-offset: -1px;
		min-height: 1.25rem;
		// padding: 0 !important;
		// color: inherit !important;
		// background: transparent !important;

		&:hover,
		&:is(.has-child-selected, .is-selected, .is-hovered) {
			outline: 1px dashed tomato;
		}

		&::before {
			content: attr(data-title);
			display: block;
			font-size: 0.75rem;
			font-family: sans-serif;
			color: gray;
			padding-left: 0.25rem;
		}
	}

	&-row {
		outline: 1px dashed gray;
		outline-offset: -1px;

		> * > .block-editor-inner-blocks {
			overflow: hidden auto;
		}

		&:is(.has-child-selected, .is-selected, .is-hovered, :hover) {
			outline: 1px dashed limegreen;
		}

		&::before {
			content: attr(data-title);
			display: block;
			font-size: 0.75rem;
			font-family: sans-serif;
			color: gray;
			padding-left: 0.25rem;
		}

		.-is-example &,
		&.-is-example {
			outline: none !important;

			&::before {
				content: none !important;
			}
		}
	}

	&-col {
		#editor & {
			background: none !important;
		}

		&,
		& > *:not(.wp-block-gutestrap-col) {
			display: flex;
		}

		> *,
		> * > .wp-block-gutestrap-col {
			width: 100%;
			align-self: stretch;
		}

		> .col__inner {
			outline-offset: -1px;
		}

		&:is(.has-child-selected, .is-selected, .is-hovered, :hover) {
			> .col__inner {
				outline: 1px dashed dodgerblue;
			}
		}

		&.block-editor-block-list__block {
			margin-top: unset;
			margin-bottom: unset;
		}

		& > .col__inner > .col__content > .block-editor-inner-blocks {
			min-width: 1em;
		}
		&
			> .col__inner
			> .col__content
			> .block-editor-inner-blocks
			> .block-editor-block-list__layout
			> p[aria-label^="Empty block"] {
			min-width: 5em;
		}
		&:not(.has-inner-blocks) > .col__inner > .col__content > .block-editor-inner-blocks {
			width: 100%;
		}

		> * > .block-editor-block-list__layout {
			> .block-list-appender:not(:first-child) {
				margin: 0;
			}
		}
	}

	&-row.is-selected > .row > .block-editor-inner-blocks > .block-editor-block-list__layout > &-col > .col__inner {
		outline: 1px dashed gray;
	}

	&-row-break {
		@include make-col-ready;
	}

	&.-is-disabled {
		opacity: 0.5;
		filter: grayscale(0.25);
		// border: 1px dashed gray;
	}
}

.wp-block-gutestrap {
	&-col {
		& > div > div > * {
			&:first-child:not(:last-child) {
				margin-top: 0;
			}
			&:nth-last-child(2) {
				margin-bottom: 0;
			}
		}
		@each $breakpoint in map-keys($grid-breakpoints) {
			@include media-breakpoint-up($breakpoint) {
				$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
				// &.justify-content#{$infix}-stretch >  {
				// 	flex-basis: 100%;
				// }
				&[class*="justify-content#{$infix}-"]:not(.justify-content#{$infix}-stretch) {
					> .block-editor-inner-blocks {
						flex-basis: unset;
					}
				}
				&.justify-content#{$infix}-stretch[class] {
					> .block-editor-inner-blocks {
						flex-basis: 100%;
					}
				}
			}
		}
	}

	&-row-break {
		font-size: 1.5rem;
		color: grey;
		display: flex;
		align-items: center;

		&::before,
		&::after {
			content: "";
			display: block;
			border: 0;
			border-top: 1px solid #ddd;
			border-bottom: 1px solid #fafafa;
			flex: 1 1 0;
		}

		svg {
			margin: 0 0.25em;
			display: block;
		}
	}
}

#editor {
	.spacing-not-linked .spacing-unit-control {
		.components-input-control__input {
			width: 6.625em;
		}
	}
	.spacing-linked-button {
		svg {
			width: 1.5em;
			height: auto;
		}
	}
	.spacing-unit-control {
		label {
			font-size: smaller;
		}
	}
}

.block-editor-block-list__block[data-title] {
	&[data-type="core/group"] {
		&:not(.has-background) {
			border: 1px dashed gray;
		}
	}
}

#editor {
	.row.wp-block-gutestrap-row {
		margin-right: 0;
		margin-left: 0;
		display: block;

		> .block-editor-inner-blocks {
			max-width: 100%;
			padding-right: 0;
			padding-left: 0;
		}

		> * > .block-editor-block-list__layout {
			@include make-row();

			> .col,
			> [class*="col-"] {
				margin-top: 0 !important;
				margin-bottom: 0 !important;
				padding-left: calc(var(--gs-gutter) / 2) !important;
				padding-right: calc(var(--gs-gutter) / 2) !important;
			}

			> .block-list-appender {
				position: relative;
				padding-left: calc(var(--gs-gutter) / 2);
				width: 100%;
				max-width: 100%;
				flex-basis: 100%;
				pointer-events: none;
				> * {
					width: fit-content;
					pointer-events: auto;
				}
			}
		}

		&.no-gutters > * > .block-editor-block-list__layout {
			margin-right: 0;
			margin-left: 0;

			> .col,
			> [class*="col-"] {
				padding-right: 0 !important;
				padding-left: 0 !important;
			}
		}
		&:not(.vertical-gutters) > * > .block-editor-block-list__layout {
			> .col,
			> [class*="col-"] {
				padding-top: 0 !important;
				padding-bottom: 0 !important;
			}
		}
		// Add a negative margin to default .row, then the vertical padding to all immediate children columns (to prevent runaway style inheritance).
		&.vertical-gutters > * > .block-editor-block-list__layout {
			// margin-top: calc(var(--gs-gutter, #{$grid-gutter-width}) * -0.5);
			// margin-bottom: calc(var(--gs-gutter, #{$grid-gutter-width}) * -0.5);

			> .col,
			> [class*="col-"] {
				padding-top: calc(var(--gs-gutter, #{$grid-gutter-width}) * 0.5) !important;
				padding-bottom: calc(var(--gs-gutter, #{$grid-gutter-width}) * 0.5) !important;
			}
			> .block-list-appender {
				padding-top: calc(var(--gs-gutter, #{$grid-gutter-width}) * 0.5);
			}
		}
	}
}

@each $breakpoint in map-keys($grid-breakpoints) {
	$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

	@include media-breakpoint-up($breakpoint, $grid-breakpoints) {
		@if $grid-row-columns > 0 {
			@for $count from 1 through $grid-row-columns {
				.row-cols#{$infix}-#{$count} > * {
					width: 100%;
				}
				.row-cols#{$infix}-#{$count} > * > * > * {
					// flex: 0 0 calc(100% / #{$count});
					// max-width: calc(100% / #{$count});
					flex: 0 0 auto;
					width: calc(100% / #{$count});
				}
			}

			[class*="row-cols-"] > * > * {
				> .col#{$infix}-auto {
					@include make-col-auto();
				}

				@if $grid-columns > 0 {
					@for $i from 1 through $grid-columns {
						> .col#{$infix}-#{$i} {
							@include make-col($i, $grid-columns);
						}
					}
				}
			}
		}

		@if $grid-columns > 0 {
			.block-editor-block-list__layout .gutestrap-block-col {
				@for $i from 1 through $grid-columns {
					$offset: $i - 1;
					&.offset#{$infix}-#{$offset} {
						@include make-col-offset($offset, $grid-columns);
					}
				}
			}
		}

		.wp-block-gutestrap-row {
			&.justify-content#{$infix}-start > * > .block-editor-block-list__layout {
				justify-content: flex-start !important;
			}
			&.justify-content#{$infix}-end > * > .block-editor-block-list__layout {
				justify-content: flex-end !important;
			}
			&.justify-content#{$infix}-center > * > .block-editor-block-list__layout {
				justify-content: center !important;
			}
			&.justify-content#{$infix}-between > * > .block-editor-block-list__layout {
				justify-content: space-between !important;
			}
			&.justify-content#{$infix}-around > * > .block-editor-block-list__layout {
				justify-content: space-around !important;
			}
			&.justify-content#{$infix}-evenly > * > .block-editor-block-list__layout {
				justify-content: space-evenly !important;
			}

			&.align-items#{$infix}-start > * > .block-editor-block-list__layout {
				align-items: flex-start !important;
			}
			&.align-items#{$infix}-end > * > .block-editor-block-list__layout {
				align-items: flex-end !important;
			}
			&.align-items#{$infix}-center > * > .block-editor-block-list__layout {
				align-items: center !important;
			}
			&.align-items#{$infix}-baseline > * > .block-editor-block-list__layout {
				align-items: baseline !important;
			}
			&.align-items#{$infix}-stretch > * > .block-editor-block-list__layout {
				align-items: stretch !important;
			}
			&.flex#{$infix}-row > * > .block-editor-block-list__layout {
				flex-direction: row !important;
			}
			&.flex#{$infix}-row-reverse > * > .block-editor-block-list__layout {
				flex-direction: row-reverse !important;
			}
		}
	}
}

//==============================================================================
// Components
//==============================================================================
.bi {
	&-block-control-icon {
		font-size: 1.25rem;
		flex: 0 0 auto;
	}
}

.components-dropdown-menu__popover.popover-align-text-start {
	.components-dropdown-menu__menu > button {
		text-align: left;
		text-align: start;
	}
}

//==============================================================================
// Block Clear
//==============================================================================
hr.gutestrap-block-clear-placeholder {
	color: grey;

	&::after {
		content: "\f314";
		font-family: dashicons;
		display: block;
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		padding: 0 0.5em;
		background-color: white;
	}
}

.wp-block[data-type="gutestrap/clear"] {
	clear: both !important;
}

//==============================================================================
// Custom SCSS
//==============================================================================
.block-editor-block-list__block[data-title] {
	&[data-type="gutestrap/custom-scss"] {
		font-size: initial;
		margin: auto;
		border: thin dashed lightgrey;
		padding: 0.5em;
		padding-left: 0;
		border-radius: 0.5em;
		background: whitesmoke;
		max-width: 120ch !important;

		&::before {
			padding: 0 0 0.75em 1em;
		}
	}
}

.gutestrap-custom-scss-editor {
	font-size: initial;

	.components-modal__frame & {
		textarea,
		.CodeMirror {
			width: 80vw;
			height: 50vh;
			min-height: 10em;
			max-width: 120ch;
		}
	}
}

//==============================================================================
// Responsive Tabs component
//==============================================================================

.gutestrap-responsive-tabs {
	.components-tab-panel__tabs {
		// box-shadow: inset 0 -4px 0 0 whitesmoke;

		&-item {
			// padding: 0 0.6875rem;
			padding: 0;
			width: calc(99% / #{list.length($grid-breakpoints)});
			justify-content: center;

			&.is-active {
				// color: $admin-color;
			}

			&:focus,
			&.is-active:focus {
				box-shadow: inset 0 0 0 1.5px transparent, inset 0 -4px 0 0 $admin-color-fallback;
				box-shadow: inset 0 0 0 1.5px transparent, inset 0 -4px 0 0 $admin-color;
				outline: none;
			}

			&.has-icon-title {
				.bi {
					font-size: 1.333em;
				}
			}

			&.has-notification {
				> span {
					position: relative;

					&::after {
						content: "";
						width: 8px;
						height: 8px;
						top: -2px;
						right: -2px;
						border-radius: 50%;
						display: block;
						position: absolute;
						background-color: dodgerblue;
						box-shadow: inset 1px 1px 3px -1px aliceblue;
					}
				}
				&-info {
					background-color: dodgerblue;
					box-shadow: inset 1px 1px 3px -1px aliceblue;
				}
				&-warn span::after {
					background-color: gold;
					box-shadow: inset 2px 2px 2px -1px lemonchiffon;
				}
				&-error span::after {
					background-color: orangered;
					box-shadow: inset 2px 2px 2px -1px tomato;
				}
			}
		}
	}
}
